@page "/transfer/{AccountId}"
@using Frontend.Services
@inject DialogService dialogService
@inject IBankService _bankService


<div class="row">
    <div class="col-lg-6 d-flex">
        <RadzenCard Style="width: 100%; overflow: hidden;">
            <h3 class="h5">From</h3>
            <div class="d-flex flex-row">
	            <div>
		            <RadzenDropDown Disabled=@true AllowClear="false" TValue="Guid" Class="w-100"
		                            TextProperty="Key" ValueProperty="Key" SelectedItem="_accountFrom" />
		            <div>Username</div>
		            <b>@(_accountFrom?.UserName)</b>
		            <div class="mt-3">Balance</div>
		            <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="@_accountFrom?.Balance.ToString("C")"/>
	            </div>
            </div>
        </RadzenCard>
    </div>
    <div class="col-lg-6 d-flex">
        <RadzenCard Style="width: 100%; overflow: hidden;">
            <h3 class="h5">To</h3>
	        <div class="d-flex flex-row">
		        <div>
			        <RadzenDropDown Data="_accounts?.Where(x => x.Key != AccountId)" TValue="Guid" AllowClear="false" Class="w-100"
			                        TextProperty="Key" ValueProperty="Key" Change="@(ChangeDestinationAccount)" />
			        <div>Username</div>
			        <b>@(_accountTo?.UserName)</b>
			        <div class="mt-3">Balance</div>
			        <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="@_accountTo?.Balance.ToString("C")"/>
		        </div>
	        </div>
        </RadzenCard>
    </div>
</div>
<div class="row my-4">
    <div class="col-md-12">
        <RadzenCard>
            <h3 class="h5">
                Account @AccountId Details
            </h3>
@*            <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Data="@(orderDetails.Where(o => o.OrderID == OrderID))" TItem="OrderDetail" ColumnWidth="200px" Class="mt-3">
                <Columns>
                    <RadzenDataGridColumn TItem="OrderDetail" Property="Quantity" Title="Quantity" />
                    <RadzenDataGridColumn TItem="OrderDetail" Property="Order.OrderDate" Title="Order Date" />
                    <RadzenDataGridColumn TItem="OrderDetail" Property="Discount" Title="Discount" FormatString="{0:P}" />
                </Columns>
            </RadzenDataGrid>*@
        </RadzenCard>
    </div>
</div>
<div class="row">
    <div class="col-md-12 text-right">
        <RadzenButton Click="@((args) => dialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Style="width: 120px" Class="mr-1" />
        <RadzenButton Click="@((args) => dialogService.Close(true))" Text="OK" Style="width: 120px" />
    </div>
</div>

@code {
	[Parameter] 
	public Guid AccountId { get; set; }

	private AccountViewModel? _accountFrom;
	private AccountViewModel? _accountTo;

	public IEnumerable<AccountViewModel> _accounts;

	protected override async Task OnInitializedAsync()
	{
		_accounts = await _bankService.ListAccounts();
		_accountFrom = _accounts?.FirstOrDefault(x => x.Key == AccountId);
	}

	private void ChangeDestinationAccount(object args)
	{
		if (Guid.TryParse(Convert.ToString(args), out var accountToId))
			_accountTo = _accounts.FirstOrDefault(x => x.Key == accountToId);
	}

}
