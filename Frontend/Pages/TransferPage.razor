@page "/transfer/{AccountId}"
@using Frontend.Services
@inject DialogService _dialogService
@inject NotificationService _notificationService
@inject IBankService _bankService


<div class="row">
    <div class="col-lg-6 d-flex">
        <RadzenCard Style="width: 100%; overflow: hidden;">
            <h3 class="h5">From</h3>
            <div class="d-flex flex-row">
	            <div>
		            <RadzenDropDown AllowClear="false" TValue="Guid" Class="w-100" @bind-value="@AccountId"
									Data="_accounts"
		                            TextProperty="Key" ValueProperty="Key" Change="@(ChangeOriginAccount)"/>
		            <div>Username</div>
		            <b>@(_accountFrom?.UserName)</b>
	            </div>
            </div>
        </RadzenCard>
    </div>
    <div class="col-lg-6 d-flex">
        <RadzenCard Style="width: 100%; overflow: hidden;">
            <h3 class="h5">To</h3>
	        <div class="d-flex flex-row">
				@if (_accounts?.Count() <= 1)
				{
					<div>
						<b> No other account was found for you to transfer.</b>
					</div>
				}
				else
				{
					<div>
						<RadzenDropDown Data="_accounts?.Where(x => x.Key != AccountId)" TValue="Guid" AllowClear="false" Class="w-100"
						                TextProperty="Key" ValueProperty="Key" Change="@(ChangeDestinationAccount)"/>
						<div>Username</div>
						<b>@(_accountTo?.UserName)</b>
					</div>
				}
	        </div>
        </RadzenCard>
    </div>
</div>
<div class="row my-4">
	<div class="col-md-12">
		<RadzenTemplateForm TItem="TransferModel" Data=@_model Submit=@TransferAmount>
			<RadzenFieldset Text="Transfer information">
				<div class="row mb-5">
					<div class="col-md-4">
						<RadzenLabel Text="Amount" />
					</div>
					<div class="col">
						<RadzenNumeric TValue="decimal" Format="C" style="display: block" Name="Amount" @bind-Value=@_model.Amount Class="w-100" />
						<RadzenNumericRangeValidator Component="Amount" Min="(decimal)0.01" Text="Amount should be greater than 0" Popup=@true Style="position: absolute" />

					</div>
				</div>
				<RadzenCard Style="width: 100%; padding: 0; overflow: hidden;">
					<div class="container">
						<div class="row">
							<div class="col-lg-3 p-3 username">
								@(_accountFrom?.UserName)
							</div>
							<div class="col-lg-7 p-3">
								<div class="row d-flex">
									<div class="col-md-6 order-first order-lg-last col-lg-6">
										<RadzenBadge BadgeStyle="BadgeStyle.Success" Class="balance" Text=@($"{_accountFrom?.Balance:C}") />
									</div>
									<div class="col-md-6 order-first order-lg-last col-lg-6">
										<RadzenBadge BadgeStyle="BadgeStyle.Danger" Class="balance" Text=@($"{(_model?.Amount > _accountFrom?.Balance ? '-' : string.Empty)}{_accountFrom?.Balance - _model?.Amount:C}") />
									</div>
								</div>
							</div>
						</div>
					</div>
				</RadzenCard>
				<RadzenCard Style="width: 100%; padding: 0; overflow: hidden;">
					<div class="container">
						<div class="row">
							<div class="col-lg-3 p-3 username">
								@(_accountTo?.UserName)
							</div>
							<div class="col-lg-7 p-3">
								<div class="row d-flex">
									<div class="col-md-6 order-first order-lg-last col-lg-6">
										<RadzenBadge BadgeStyle="BadgeStyle.Success" Class="balance" Text=@($"{_accountTo?.Balance:C}") />
									</div>
									<div class="col-md-6 order-first order-lg-last col-lg-6">
										<RadzenBadge BadgeStyle="BadgeStyle.Secondary" Class="balance" Text=@($"{_accountTo?.Balance + _model?.Amount:C}") />
									</div>
								</div>
							</div>
						</div>
					</div>
				</RadzenCard>
				<br/>
				<RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
				<RadzenButton ButtonStyle="ButtonStyle.Danger" Click="args => CloseModal()" Text="Cancel"></RadzenButton>

			</RadzenFieldset>
		</RadzenTemplateForm>
	</div>
</div>

<style>
	.username {
		min-height: 72px;
		color: #da0074;
		background-color: rgba(255, 41, 155, .1);
		font-size: 20px;
		font-weight: bold;
		line-height: 20px;
		letter-spacing: -0.02em;
	}
	.balance {
		font-size: 16px;
		font-weight: bold;
		line-height: 20px;
		padding: 8px;
	}
</style>

@code {
	[Parameter] 
	public Guid AccountId { get; set; }

	private AccountViewModel? _accountFrom;
	private AccountViewModel? _accountTo;

	private IEnumerable<AccountViewModel>? _accounts;

	private TransferModel? _model = new TransferModel();

	protected override async Task OnInitializedAsync()
	{
		_accounts = await _bankService.ListAccounts();
		_accountFrom = _accounts?.FirstOrDefault(x => x.Key == AccountId);
		_model.AccountFrom = AccountId;
	}

	private void ChangeDestinationAccount(object args)
	{
		if (Guid.TryParse(Convert.ToString(args), out var accountToId))
		{
			_accountTo = _accounts.FirstOrDefault(x => x.Key == accountToId);
			_model.AccountTo = accountToId;
		}
		
	}

	private void ChangeOriginAccount(object args)
	{
		if (Guid.TryParse(Convert.ToString(args), out var accountFromId))
		{
			_accountFrom = _accounts.FirstOrDefault(x => x.Key == accountFromId);
			_model.AccountFrom = accountFromId;
			AccountId = accountFromId;

		}
	}

	public class TransferModel
	{
		public Guid? AccountTo { get; set; }

		public Guid? AccountFrom { get; set; }

		public decimal Amount { get; set; }
	}

	private async Task TransferAmount()
	{
		try
		{
			var result = await _bankService.TransferAmount(_model.AccountFrom, _model.AccountTo, _model.Amount);
			if (result.IsSuccessStatusCode)
			{
				ShowNotification(new NotificationMessage
				{
					Severity = NotificationSeverity.Success, 
					Summary = "Success!", 
					Detail = "Your transfer has been confirmed.",
					Duration = 4000
				});
				CloseModal();

			}
			else
			{
				ShowNotification(new NotificationMessage
				{
					Severity = NotificationSeverity.Error, 
					Summary = "Something went wrong!", 
					Detail = "Please check the information you provided.",
					Duration = 4000
				});
			}


		}
		catch (Exception ex)
		{
			ShowNotification(new NotificationMessage
			{
				Severity = NotificationSeverity.Error, 
				Summary = "An error has occurred during the transaction.", 
				Detail = ex.Message, 
				Duration = 4000
			});
		}
	}

	void ShowNotification(NotificationMessage message)
	{
		_notificationService.Notify(message);
	}

	private void CloseModal()
	{
		_dialogService.Close();
	}

}
